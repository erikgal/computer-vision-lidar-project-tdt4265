On branch main
Your branch is up to date with 'origin/main'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   configs/tdt4265.py
	modified:   notebooks/code_introduction.ipynb

no changes added to commit (use "git add" and/or "git commit -a")
6099aa9f9538454be94f3ee7ad7d4f303ebc651f
diff --git a/SSD/configs/tdt4265.py b/SSD/configs/tdt4265.py
index 6968d5e..d49b6e9 100644
--- a/SSD/configs/tdt4265.py
+++ b/SSD/configs/tdt4265.py
@@ -4,13 +4,14 @@ from ssd.data import TDT4265Dataset
 from tops.config import LazyCall as L
 from ssd.data.transforms import (
     ToTensor, Normalize, Resize,
-    GroundTruthBoxesToAnchors)
+    GroundTruthBoxesToAnchors,  RandomHorizontalFlip, Resize, RandomSampleCrop, ColorJitter)
 from .ssd300 import train, anchors, optimizer, schedulers, backbone, model, data_train, data_val, loss_objective
 from .utils import get_dataset_dir
 
 # Keep the model, except change the backbone and number of classes
 train.imshape = (128, 1024)
 train.image_channels = 3
+train.epochs = 50
 model.num_classes = 8 + 1  # Add 1 for background class
 
 anchors.feature_sizes =  [[32, 256], [16, 128], [8, 64], [4, 32], [2, 16], [1, 8]]
@@ -19,16 +20,20 @@ anchors.min_sizes =  [[16, 16], [32, 32], [48, 48], [64, 64], [86, 86], [128, 12
 anchors.aspect_ratios = [[2, 3], [2, 3], [2, 3], [2, 3], [2], [2]]
 
 train_cpu_transform = L(torchvision.transforms.Compose)(transforms=[
+    L(RandomSampleCrop)(),
     L(ToTensor)(),
+    L(RandomHorizontalFlip)(),
     L(Resize)(imshape="${train.imshape}"),
     L(GroundTruthBoxesToAnchors)(anchors="${anchors}", iou_threshold=0.5),
 ])
+
 val_cpu_transform = L(torchvision.transforms.Compose)(transforms=[
     L(ToTensor)(),
     L(Resize)(imshape="${train.imshape}"),
 ])
 gpu_transform = L(torchvision.transforms.Compose)(transforms=[
-    L(Normalize)(mean=[0.4765, 0.4774, 0.2259], std=[0.2951, 0.2864, 0.2878])
+    L(Normalize)(mean=[0.4765, 0.4774, 0.2259], std=[0.2951, 0.2864, 0.2878]),
+    L(ColorJitter)(),
 ])
 data_train.dataset = L(TDT4265Dataset)(
     img_folder=get_dataset_dir("tdt4265_2022"),
diff --git a/SSD/notebooks/code_introduction.ipynb b/SSD/notebooks/code_introduction.ipynb
index ca1d13f..1471816 100644
--- a/SSD/notebooks/code_introduction.ipynb
+++ b/SSD/notebooks/code_introduction.ipynb
@@ -3,7 +3,7 @@
   {
    "cell_type": "code",
    "execution_count": 1,
-   "id": "a15bb5a5",
+   "id": "7c1d9e2f",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -13,7 +13,7 @@
   },
   {
    "cell_type": "markdown",
-   "id": "16a16d28",
+   "id": "2c9ce027",
    "metadata": {},
    "source": [
     "# Introduction to SSD\n",
@@ -30,7 +30,7 @@
   },
   {
    "cell_type": "markdown",
-   "id": "b01ea8e3",
+   "id": "1c394414",
    "metadata": {},
    "source": [
     "## Configuration files\n",
@@ -44,7 +44,7 @@
   {
    "cell_type": "code",
    "execution_count": 2,
-   "id": "66214f45",
+   "id": "2f8d8bf9",
    "metadata": {},
    "outputs": [
     {
@@ -65,7 +65,7 @@
   },
   {
    "cell_type": "markdown",
-   "id": "879a680c",
+   "id": "78f5d394",
    "metadata": {},
    "source": [
     "`cfg` supports access syntax, where all objects in `configs/ssd300.py` are accessible via their attribute name.\n",
@@ -75,7 +75,7 @@
   {
    "cell_type": "code",
    "execution_count": 3,
-   "id": "8ddc89b9",
+   "id": "01584e1b",
    "metadata": {},
    "outputs": [
     {
@@ -92,7 +92,7 @@
   },
   {
    "cell_type": "markdown",
-   "id": "2f7b97d7",
+   "id": "95a90b41",
    "metadata": {},
    "source": [
     "If we print `cfg.model`, notice that it returns a dictionary and not the model object itself (which is `SSD300` from [`ssd/modeling/ssd.py`](../ssd/modeling/ssd.py)). This is because the model is defined \"lazily\" (wrapped with a `LazyCall`).\n",
@@ -103,7 +103,7 @@
   {
    "cell_type": "code",
    "execution_count": 4,
-   "id": "e8daf7c5",
+   "id": "1b7fd29e",
    "metadata": {},
    "outputs": [
     {
@@ -194,7 +194,7 @@
   },
   {
    "cell_type": "markdown",
-   "id": "f67edd3a",
+   "id": "a02ca660",
    "metadata": {},
    "source": [
     "Another example, we can load the first batch of the dataset and run a forward pass with the model:"
@@ -203,7 +203,7 @@
   {
    "cell_type": "code",
    "execution_count": 5,
-   "id": "af819ae7",
+   "id": "2a5369c8",
    "metadata": {},
    "outputs": [
     {
@@ -232,7 +232,7 @@
   },
   {
    "cell_type": "markdown",
-   "id": "f0f15dce",
+   "id": "929e52cb",
    "metadata": {},
    "source": [
     "You might ask yourself, why? At first sight, this seems very complicated rather than plain-old  hard coded values.\n",
@@ -243,7 +243,7 @@
   {
    "cell_type": "code",
    "execution_count": 6,
-   "id": "02b474c2",
+   "id": "285fef1a",
    "metadata": {},
    "outputs": [
     {
@@ -265,7 +265,7 @@
   },
   {
    "cell_type": "markdown",
-   "id": "c120d29c",
+   "id": "76c438cb",
    "metadata": {},
    "source": [
     "Another reason is **configuration inheritance**. E.g. for the last task, you are going to train VGG on the VOC dataset. \n",
@@ -281,7 +281,7 @@
   {
    "cell_type": "code",
    "execution_count": 7,
-   "id": "655e002d",
+   "id": "9fb40cd3",
    "metadata": {},
    "outputs": [
     {
@@ -395,7 +395,7 @@
   },
   {
    "cell_type": "markdown",
-   "id": "1fcf5864",
+   "id": "90170c31",
    "metadata": {},
    "source": [
     "# Useful commands:\n"
@@ -403,7 +403,7 @@
   },
   {
    "cell_type": "markdown",
-   "id": "3397a7a7",
+   "id": "2d14a88a",
    "metadata": {},
    "source": [
     "#### Training and evaluation\n",
@@ -437,8 +437,20 @@
     "#### Runtime analysis:\n",
     "```\n",
     "python3 runtime_analysis.py configs/ssd300.py\n",
-    "```"
+    "\n",
+    "tensorboard --logdir outputs\n",
+    "\n",
+    "```\n",
+    "\n"
    ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "5f226f2e",
+   "metadata": {},
+   "outputs": [],
+   "source": []
   }
  ],
  "metadata": {
